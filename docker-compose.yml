version: '3.8'

services:
  # Go Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: trendy-repos-app
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - /app/tmp
    environment:
      - CGO_ENABLED=0
      - GOOS=linux
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trendy_user
      - DB_PASSWORD=trendy_password
      - DB_NAME=trendy_repos
      - DB_SSLMODE=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trendy-network
    restart: unless-stopped

  # PostgreSQL Database Service
  postgres:
    image: postgres:16-alpine
    container_name: trendy-repos-postgres
    environment:
      POSTGRES_DB: trendy_repos
      POSTGRES_USER: trendy_user
      POSTGRES_PASSWORD: trendy_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trendy_user -d trendy_repos"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - trendy-network
    restart: unless-stopped

  # PgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trendy-repos-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - trendy-network
    restart: unless-stopped
    profiles:
      - dev

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network for service communication
networks:
  trendy-network:
    driver: bridge 